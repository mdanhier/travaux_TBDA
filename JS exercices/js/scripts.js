function testLetters(str) {
    /* sert √† v√©rifier si l'argument pass√© est bien constitu√© de lettres (pour un pr√©nom par exemple),
    malheureusement il est difficile de prendre en compte tous les caract√®res possibles dans toutes les langues */
    return (!(/^[a-zA-Z√†√°√¢√§√£√•ƒÖƒçƒáƒô√®√©√™√´ƒóƒØ√¨√≠√Æ√Ø≈Ç≈Ñ√≤√≥√¥√∂√µ√∏√π√∫√ª√º≈≥≈´√ø√Ω≈º≈∫√±√ß≈ì√¶ƒç≈°≈æ√Ä√Å√Ç√Ñ√É√ÖƒÑƒÜƒåƒñƒò√à√â√ä√ã√å√ç√é√èƒÆ≈Å≈É√í√ì√î√ñ√ï√ò√ô√ö√õ√ú≈≤≈™≈∏√ù≈ª≈π√ë√ü√á≈í√Üƒå≈†≈Ω‚àÇ√∞ ,.'-]+$/u.test(str)) || str === null);
}

function testLettersMany(...strArr) {
    // effectue simplement une boucle de la fonction testLetters avec autant d'arguments que donn√©s
    return strArr.some(function (str) {
        return (testLetters(str));
    }
    )
}

function testNumber(nb) {
    // sert √† v√©rifier si l'argument pass√© est bien un nombre
    return (isNaN(nb) || nb == '' || nb === null);
}

function testNumbersMany(...nbArr) {
    // effectue simplement une boucle de la fonction testNumbers avec autant d'arguments que donn√©s
    return nbArr.some(function (nb) {
        return (testNumber(nb));
    })
}

function multiply(x, y) {
    // fonction de multiplication basique
    return x * y;
}
function substract(x, y) {
    // fonction de soustraction basique
    return x - y;
}
function add(x, y) {
    // fonction d'addition basique
    return +x + +y;
}
function divide(x, y) {
    // fonction de division basique
    if (y == 0) throw new Error("La division par 0 est impossible.");
    else return x / y;
}

function ex1_1() {
    // affiche le nom et le pr√©nom
    function nomPrenom(nom, prenom) {
        if (testLettersMany(nom, prenom)) throw new Error("Merci de rentrer un nom et un pr√©nom corrects.");
        else alert("Votre nom est " + nom + " et votre pr√©nom est " + prenom);
    }
    let nom = prompt("Entrez votre nom.");
    let prenom = prompt("Entrez votre pr√©nom.");
    try {
        nomPrenom(nom, prenom);
    } catch (err) {
        alert(err.message);
    }
}

function ex1_2() {
    let x = prompt("Entrez un nombre.");
    let y = prompt("Entrez un multiplicateur.");
    try {
        if (testNumbersMany(x, y)) throw new Error("Merci de rentrer des nombres corrects.");
        else alert("Le produit de " + x + " par " + y + " est " + multiply(x, y));
    } catch (err) {
        alert(err.message);
    }
}

function ex1_3() {
    // convertit les degr√©s Celsius en Fahrenheit
    function convertCelToFahr(cel) {
        if (testNumber(cel)) throw new Error("Merci de rentrer une temp√©rature correcte.");
        else if (cel < -273.15) throw new Error("On ne peut pas descendre sous le z√©ro absolu ü§¶‚Äç‚ôÇÔ∏è...");
        else return (cel * 9 / 5 + 32);
    }
    let cel = prompt("Entrez la temp√©rature en degr√©s Celsius.");
    try {
        alert(cel + "¬∞C vaut " + convertCelToFahr(cel) + "¬∞F.");
    } catch (err) {
        alert(err.message);
    }
}


function ex2_1() {
    let ex2a = "100";
    alert("Ceci est une cha√Æne de caract√®res : " + ex2a + ".");
}
function ex2_2() {
    let ex2b = 100;
    alert("b vaut " + ex2b);
    ex2b--;
    alert("Apr√®s d√©cr√©mentation, b vaut " + ex2b + ".");
}
function ex2_3() {
    let ex2a = "100";
    let ex2c = 1.00;
    alert("c vaut " + ex2c + " et a vaut " + ex2a + ".");
    ex2c += ex2a;
    alert("On ajoute √† c la valeur de a, c vaut maintenant " + ex2c + ".")
    ex2a = "100";
    ex2c = 1.00;
    ex2c += +ex2a;
    alert("Si on souhaite r√©ellement additionner et non concat√©ner, il faut rajouter un '+' avant la variable a (qui a √©t√© d√©finie comme une cha√Æne de caract√®res). Quand on proc√®de ainsi, c vaut " + ex2c + ".");
}
function ex2_4() {
    let ex2d = true;
    alert("d vaut " + ex2d);
    ex2d = !ex2d;
    alert("Apr√®s inversion, d vaut " + ex2d + ".");
}

function ex3_1() {
    // sert √† v√©rifier si un nombre est pair ou impair et renvoie true, false ou une erreur selon le r√©sultat
    function testEvenOdd(nb) {
        if (testNumber(nb)) throw new Error("Merci de rentrer un nombre correct.");
        else if (nb % 1 != 0) throw new Error("Seul un entier peut √™tre pair ou impair.");
        else return (nb % 2 == 0);
    }
    let nb = prompt("Entrez un nombre.");
    try {
        if (testEvenOdd(nb)) alert("Nombre pair.");
        else alert("Nombre impair.");
    } catch (err) {
        alert(err.message);
    }
}

function ex3_2() {
    // nettoie la date donn√©e en retirant "/", "_", " " et "-"
    function cleanTrimDate(date) {
        if (date === "") throw new Error("Merci de rentrer une date correcte.");
        else return date.trim().replace(/[\/_ -]+/g, '').replace();
    }
    // calcule l'√¢ge d'une personne (en ann√©e) selon une date pass√©e au format DDMMYYYY en argument
    function calcAge(birthDateStr) {
        let birthDateStrTrimmed = cleanTrimDate(birthDateStr);
        let birthDate = new Date(birthDateStrTrimmed.substr(4, 4), +birthDateStrTrimmed.substr(2, 2) - 1, birthDateStrTrimmed.substr(0, 2));
        if (isNaN(Date.parse(birthDate))) throw new Error("Merci de rentrer une date correcte.");
        else return ~~((Date.now() - birthDate) / (31557600000));
    }
    let birthDateStr = prompt("Entrez votre date de naissance au format JJ MM YYYY.");
    try {
        let age = calcAge(birthDateStr);
        if (age >= 18) alert("Vous avez " + age + " ans. Vous √™tes enfin majeur !");
        else alert("Vous avez " + age + " ans. Vous √™tes toujours mineur.. Encore " + (18 - age) + " ans avant la majorit√© !");
    } catch (err) {
        alert(err.message);
    }
}

function ex3_3() {
    let x = prompt("Entrez un premier nombre.");
    let y = prompt("Entrez un deuxi√®me nombre.");
    let o = prompt("Entrez un op√©rateur parmis + - * /.");
    // simple switch pour √©valuer quel op√©rateur l'utilisateur a entr√©
    try {
        if (testNumbersMany(x, y)) throw new Error("Merci de rentrer des nombres corrects.");
        else switch (o) {
            case '+':
                return alert("Le r√©sultat de " + x + o + y + " est : " + add(x, y));
            case '-':
                return alert("Le r√©sultat de " + x + o + y + " est : " + substract(x, y));
            case '*':
                return alert("Le r√©sultat de " + x + o + y + " est : " + multiply(x, y));
            case '/':
                return alert("Le r√©sultat de " + x + o + y + " est : " + divide(x, y));
            default:
                throw new Error(o + " n'est pas un op√©rateur valide.");
        }
    } catch (err) {
        alert(err.message);
    }
}

function ex4_1() {
    let name;
    let namesArr = [];
    try {
        while (name != "") {
            if (testLetters(name)) throw new Error("Merci de rentrer un pr√©nom correct.");
            else {
                // on demande un pr√©nom et si il n'est pas vide, on le rentre dans un tableau, et on recommence
                name = prompt("Entrez un pr√©nom.");
                if (name == "") break;
                namesArr.push(name);
            }
        }
        if (namesArr.length == 0) throw new Error("Merci de rentrer au minimum un pr√©nom.");
        // on affiche le tableau contenant tous les pr√©noms
        alert("Vous avez entr√© " + namesArr.length + " pr√©nom(s). Voici la liste : " + namesArr);
    }
    catch (err) {
        alert(err.message);
    }
}

function ex4_2() {
    let nb = prompt("Entrez un nombre.");
    let nbArr = [];
    try {
        if (testNumber(nb)) throw new Error("Merci de rentrer un nombre correct.");
        // on demande un nombre et on parcourt une boucle de 0 jusqu'√† ce nombre en ins√©rant chaque valeur de l'index dans un tableau
        else for (let i = 0; i < nb; i++) {
            nbArr.push(i);
        }
        alert("Les nombres plus petits que " + nb + " sont : " + nbArr + ".");
    }
    catch (err) {
        alert(err.message);
    }
}

function ex4_3() {
    let nb = 1;
    let nbArr = [];
    let sum;
    let avg;
    try {
        while (nb != "") {
            if (testNumber(nb)) throw new Error("Merci de rentrer un nombre correct.");
            else {
                // On demande un nombre jusqu'√† ce que l'utilisateur ne rentre rien, on rentre √† chaque fois le nombre donn√© dans un tableau
                nb = prompt("Entrez un nombre.");
                if (nb == "") break;
                nbArr.push(nb);
            }
        }
        if (nbArr.length == 0) throw new Error("Merci de rentrer au minimum un nombre.");
        // calcul de la somme via une fonction sur le tableau, puis de la moyenne gr√¢ce √† la somme obtenue
        sum = nbArr.reduce((x, y) => +x + +y, 0);
        avg = sum / nbArr.length;
        alert("La somme des nombres " + nbArr + " est " + sum + ".\nLeur moyenne est " + avg + ".");
    }
    catch (err) {
        alert(err.message);
    }
}

function ex4_4() {
    let nb = prompt("De quel nombre voulez-vous voir la table de multiplication ?");
    let mul = prompt("Jusqu'√† quel multiple voulez-vous aller ?");
    let msg = "";
    try {
        if (testNumbersMany(nb, mul)) throw new Error("Merci de rentrer des nombres corrects.");
        // on fait une boucle de 0 au Multiple pour calculer chaque multiple et les concat√©ner pour l'affichage
        for (let i = 0; i <= nb; i++) {
            msg += i + " x " + mul + " = " + i * mul + "\n";
        }
        alert(msg);
    }
    catch (err) {
        alert(err.message);
    }
}

function ex4_5() {
    let str = prompt("Entrez une cha√Æne de caract√®res.");
    let strFor;
    let fvow;
    let count = 0;
    try {
        if (str == "") throw new Error("Merci de rentrer une cha√Æne de caract√®res corrects.");
        /* j'ai d√©cid√© de formater la cha√Æne pour retirer les diacritiques et transformer les voyelles sp√©ciales en voyelles simples en "a"
        Cette proc√©dure me permet d'√©viter de comparer toutes les voyelles √† chaque it√©ration de boucle */
        strFor = (str.normalize("NFD").toLowerCase().replace(/\p{Diacritic}/gu, "").replace(/\{|√∏|≈ì|√¶|e|i|o|u|y|\}/gu, "a"))
        fvow = strFor.indexOf("a");
        for (let i = fvow, j = (fvow + 1); i <= strFor.length; i++, j++) {
            if (strFor.substring(i, j) == "a") count++;
        }
        alert("Il y a " + count + " voyelles dans la cha√Æne \"" + str + "\".")
    }
    catch (err) {
        alert(err.message);
    }
}



function ex5_1(reset) {
    function resetEx5_1() {
        // permet de r√©initialiser la div pour pouvoir retester le bouton sans recharger la page
        document.getElementById("bfimg").innerHTML = ""
    }

    function showEx5_1(src, x, y) {
        // on rajoute l'image et le texte dans la div pr√©vue √† cet effet
        document.getElementById("bfimg").innerHTML = "<img src='" + src + "' alt='Papillon'><p>Le cube de " + x + " est √©gal √† " + Math.pow(x, 3) + ".</p><p>Le produit de " + x + " x " + y + " est √©gal √† " + multiply(x, y) + ".</p>";
    }
    if (reset) {
        try {
            resetEx5_1();
        }
        catch (err) {
            alert(err.message);
        }
    }
    else {
        let x = prompt("Entrez un nombre.");
        let y = prompt("Entrez un multiplicateur.");
        try {
            // si tout se passe bien, on appelle la fonction showEx5_1 pour afficher le contenu de la div
            if (testNumbersMany(x, y)) throw new Error("Merci de rentrer un nombre correct.");
            showEx5_1("media/papillon.jpg", x, y);
        }
        catch (err) {
            alert(err.message);
        }
    }
}

function ex5_2() {
    function strTok(str1, str2, n) {
        // on pense √† faire le calcul n-1 car l'utilisateur compte √† partir de 1 contrairement au tableau qui lui commence √† 0.
        if (str1.indexOf(str2) < 0) throw new Error("Ce caract√®re n'appara√Æt pas dans la cha√Æne.");
        else return (str1.split(str2)[n - 1]);
    }
    let str = prompt("Entrez des mots s√©par√©s par un m√™me caract√®re.");
    let char = prompt("Entrez le caract√®re en question.");
    let index = prompt("Quel est num√©ro du mot √† obtenir ?");
    try {
        // on pense √† v√©rifier que l'utilisateur ne rentre pas n'importe quoi / n'oublie pas de rentrer quelque chose
        if (testNumber(index)) throw new Error("Merci de rentrer un num√©ro correct.");
        if (char == '') throw new Error("Merci de rentrer un caract√®re correct.");
        let token = strTok(str, char, index);
        if (typeof token === "undefined" || token == '') throw new Error("Impossible de trouver le mot.");
        else alert("Le mot n¬∞" + index + " est " + token + ".");
    } catch (err) {
        alert(err.message);
    }
}